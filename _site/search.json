[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "STAT468 Assignments Analysis",
    "section": "",
    "text": "This is the homepage for STAT 468 Assignment Analysis."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "assignment3.html",
    "href": "assignment3.html",
    "title": "STAT 468 Assignment Analysis",
    "section": "",
    "text": "library(tidyverse)\nlibrary(babynames)\nlibrary(stringr)\nlibrary(dplyr)\nlibrary(forcats)\nlibrary(ggplot2)\nlibrary(nycflights13)\nlibrary(lubridate)\nlibrary(readr)\nlibrary(DBI)\nlibrary(dbplyr)\nlibrary(worldfootballR)\n\nPart 2:\n1.Tidy\n1.1 Is your data tidy?\n\ndf_wide &lt;- read_csv(\"Thomas-Muller_2020.csv\")\n\nYes, the df_wide dataset is tidy. Each variable has its own column (e.g.: Player, Date), each observation has its own row, and the dataset contains only one type of observational unit: match performance. Therefore, the dataset follows the tidy data principles. However, although the data is tidy, it still contains some missing values (NA) in columns such as Gls_Performance, which may affect downstream analysis. We can use the following code to filter out the NA’s.\n\ndf_wide |&gt; \n  filter(!is.na(Gls_Performance), !is.na(Ast_Performance)) |&gt; \n  select(Gls_Performance, Ast_Performance)\n\n1.2 Long or Wide Format?\nThe dataset is in wide format: each row represents one match appearance by Thomas Müller, and each statistic (like goals, assists, tackles) is in its own column.\nIn the following example, I transformed a subset of the data (Gls_Performance, Ast_Performance) into long format, where each row now represents one statistic type and its value, identified by the Date and Competition.\n\ndf_wide |&gt; \n  pivot_longer(cols = c(Gls_Performance, Ast_Performance),\n               names_to = \"Stat_Type\", values_to = \"Value\") |&gt; \n  select(Player, Date, Opponent, Stat_Type, Value) |&gt; \n  slice_head(n = 10)\n\n# A tibble: 10 × 5\n   Player        Date       Opponent        Stat_Type       Value\n   &lt;chr&gt;         &lt;date&gt;     &lt;chr&gt;           &lt;chr&gt;           &lt;dbl&gt;\n 1 Thomas Müller 2019-08-03 Dortmund        Gls_Performance     0\n 2 Thomas Müller 2019-08-03 Dortmund        Ast_Performance     0\n 3 Thomas Müller 2019-08-12 Energie Cottbus Gls_Performance     0\n 4 Thomas Müller 2019-08-12 Energie Cottbus Ast_Performance     0\n 5 Thomas Müller 2019-08-16 Hertha BSC      Gls_Performance     0\n 6 Thomas Müller 2019-08-16 Hertha BSC      Ast_Performance     0\n 7 Thomas Müller 2019-08-24 Schalke 04      Gls_Performance     0\n 8 Thomas Müller 2019-08-24 Schalke 04      Ast_Performance     0\n 9 Thomas Müller 2019-08-31 Mainz 05        Gls_Performance     0\n10 Thomas Müller 2019-08-31 Mainz 05        Ast_Performance     2\n\n\n\n\nTransform\n\n2.1 Use regular expressions and string manipulation to convert the surname of each athlete to all capital letters.\n\nFB_player &lt;- \n  fb_big5_advanced_season_stats(season_end_year=2021,\n                                stat_type=\"standard\",\n                                team_or_player=\"player\")\n\nFB_player |&gt; \n  mutate(Player = str_replace(Player, \"(\\\\w+)$\",\n                              function(x) str_to_upper(x))) |&gt;\n  slice_head(n = 10) |&gt; \n  select(Player)\n\n                 Player\n1  Martin AGIRREGABIRIA\n2     Rodrigo BATTAGLIA\n3                BURGUI\n4         Iñigo CÓRDOBA\n5             DEYVERSON\n6          Rubén DUARTE\n7           Rodrigo ELY\n8           Manu GARCÍA\n9          Sergi GARCÍA\n10        John GUIDETTI\n\n\n2.2 If applicable, perform appropriate date-time manipulation to have such variables in ISO 8601 format.\n\ndf_wide_new &lt;- df_wide |&gt; \n  mutate(Date_alt = format(Date, \"%m-%d-%Y\"))\ndf_wide_new |&gt; \n  mutate(Date_iso8601 = mdy(Date_alt)) |&gt; \n  select(Player, Date, Date_alt, Date_iso8601) |&gt; \n  slice_head(n = 10)\n\n# A tibble: 10 × 4\n   Player        Date       Date_alt   Date_iso8601\n   &lt;chr&gt;         &lt;date&gt;     &lt;chr&gt;      &lt;date&gt;      \n 1 Thomas Müller 2019-08-03 08-03-2019 2019-08-03  \n 2 Thomas Müller 2019-08-12 08-12-2019 2019-08-12  \n 3 Thomas Müller 2019-08-16 08-16-2019 2019-08-16  \n 4 Thomas Müller 2019-08-24 08-24-2019 2019-08-24  \n 5 Thomas Müller 2019-08-31 08-31-2019 2019-08-31  \n 6 Thomas Müller 2019-09-14 09-14-2019 2019-09-14  \n 7 Thomas Müller 2019-09-18 09-18-2019 2019-09-18  \n 8 Thomas Müller 2019-09-21 09-21-2019 2019-09-21  \n 9 Thomas Müller 2019-09-28 09-28-2019 2019-09-28  \n10 Thomas Müller 2019-10-01 10-01-2019 2019-10-01  \n\n\nIn the original dataset, the Date column was already in ISO 8601 format (YYYY-MM-DD). To demonstrate date-time manipulation, I first converted the Date column into a non-ISO format (“%m-%d-%Y”, e.g: 08-03-2019) using the format() function. I then parsed that reformatted string back into ISO 8601 format using mdy().\n2.3 If applicable, identify missing values in the dataset and interpret why these values may be missing.\n\ncolSums(is.na(df_wide))\n\n               ...1              Player              Season                Date \n                  0                   0                   0                   0 \n                Day                Comp               Round               Venue \n                  0                   0                   0                   0 \n             Result               Squad            Opponent               Start \n                  0                   0                   0                   0 \n                Pos                 Min     Gls_Performance     Ast_Performance \n                  1                   1                   1                   1 \n     PK_Performance   PKatt_Performance      Sh_Performance     SoT_Performance \n                  1                   1                   1                   1 \n   CrdY_Performance    CrdR_Performance Touches_Performance     Tkl_Performance \n                  1                   1                   8                   8 \n    Int_Performance  Blocks_Performance         xG_Expected       npxG_Expected \n                  1                   8                   8                   8 \n       xAG_Expected             SCA_SCA             GCA_SCA          Cmp_Passes \n                  8                   8                   8                   8 \n         Att_Passes  Cmp_percent_Passes         PrgP_Passes     Carries_Carries \n                  8                   8                   8                   8 \n       PrgC_Carries        Att_Take_Ons       Succ_Take_Ons \n                  8                   8                   8 \n\n\nThe output reveals which columns contain missing values and how many. These missing values might occur for several reasons:\nThe player (Thomas Müller) may not have participated in certain matches, so statistics like goals, assists, or minutes are not recorded.\n2.4 Use logical conditions (boolean variables) to filter rows based on a specific criterion.\n\ndf_wide |&gt; \n  filter(Gls_Performance &gt;= 1) |&gt; \n  select(Player, Date, Comp, Result, Gls_Performance) |&gt; \n  arrange(desc(Gls_Performance))\n\n# A tibble: 13 × 5\n   Player        Date       Comp         Result Gls_Performance\n   &lt;chr&gt;         &lt;date&gt;     &lt;chr&gt;        &lt;chr&gt;            &lt;dbl&gt;\n 1 Thomas Müller 2020-08-14 Champions Lg W 8–2                2\n 2 Thomas Müller 2019-09-18 Champions Lg W 3–0                1\n 3 Thomas Müller 2019-10-29 DFB-Pokal    W 2–1                1\n 4 Thomas Müller 2019-11-30 Bundesliga   L 1–2                1\n 5 Thomas Müller 2019-12-11 Champions Lg W 3–1                1\n 6 Thomas Müller 2019-12-14 Bundesliga   W 6–1                1\n 7 Thomas Müller 2020-01-19 Bundesliga   W 4–0                1\n 8 Thomas Müller 2020-01-25 Bundesliga   W 5–0                1\n 9 Thomas Müller 2020-02-01 Bundesliga   W 3–1                1\n10 Thomas Müller 2020-02-05 DFB-Pokal    W 4–3                1\n11 Thomas Müller 2020-03-08 Bundesliga   W 2–0                1\n12 Thomas Müller 2020-05-23 Bundesliga   W 5–2                1\n13 Thomas Müller 2020-06-27 Bundesliga   W 4–0                1\n\n\nThis Boolean filtering helps identify matches where Müller contributed directly to the team’s scoreline. It allows for performance-focused analysis by narrowing down to impactful games. For example, I observe that his top scoring performance (2 goals) was in a Champions League match against Barcelona on August 14, 2020."
  },
  {
    "objectID": "assignment1.html",
    "href": "assignment1.html",
    "title": "STAT 468 Assignment Analysis",
    "section": "",
    "text": "library(ggplot2)\nlibrary(dplyr)\nlibrary(readr)\nlibrary(tibble)\nlibrary(tidyr)\nlibrary(tidyverse)\nlibrary(worldfootballR)\nlibrary(palmerpenguins)\nlibrary(nycflights13)\n\nPart Two:\n\nMake a scatter plot of 2 continuous variables and describe their relationship. Then add additional variables as aesthetics to either size (numeric) or shape (categorical)\n\n\nFB &lt;- \n  fb_big5_advanced_season_stats(season_end_year=2021,\n                                stat_type=\"standard\",\n                                team_or_player=\"team\") |&gt; \n  filter(Team_or_Opponent == \"team\" )\n\n\nggplot(FB, aes(x = Poss, y = xG_Expected)) +\n  geom_point(alpha = 0.6, mapping = aes(color = Comp, shape = Comp)) +\n  labs(title = \"Possesion percentage vs Expected goals\", \n       x = \"Possession(%)\", \n       y = \"Expected goals\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nThe scatter plot shows a positive relationship between possession percentage and expected goals: teams with higher possession generally create more scoring chances. Color and shape were used to show differences between competitions. This helps visualize how possession and scoring opportunities vary across leagues.\n\n\nUse a different geom to visualize the relationship between 1 continuous and 1 categorical variable in your dataset\n\n\nAGE &lt;- FB |&gt; \n  group_by(Comp) |&gt; \n  summarise(Age)\nggplot(AGE, aes(x = Comp, y = Age)) +\n  geom_boxplot(fill = \"green\") +\n  labs(title = \"League vs. Age\", x = \"League names\", y = \"Age\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nA boxplot was used to show the relationship between league (categorical) and player age (continuous). The plot compares the distribution of ages across different leagues, making it easy to see differences in typical player age between competitions.\n\n\nMake a histogram to visualize the distribution of a continuous variable in your dataset\n\n\nFB_player &lt;- \n  fb_big5_advanced_season_stats(season_end_year=2021,\n                                stat_type=\"standard\",\n                                team_or_player=\"player\")\n\n\nggplot(FB_player, aes(x = as.numeric(Age))) +\n  geom_histogram(color = \"purple\", fill = \"Turquoise\") +\n  labs(title = \"Distribution of players by age \", \n       x = \"Age\", y = \"Number of players\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\nA histogram was used to show the distribution of player ages. Most players are between 20 and 30 years old, with the distribution peaking around the mid-20s and tapering off at older ages.\n\n\nCreate a data manipulation pipeline that selects a subset of columns, performs an inter- mediate calculation, filters the rows, and sorts the resulting output. What question are you trying to answer with it? in relation to your dataset?\n\n\nFB_player |&gt;\n  select(Squad, Player, Age, xG_Expected, xAG_Expected) |&gt;\n  mutate(xG_plus_xA = xG_Expected + xAG_Expected) |&gt;\n  filter(Age &lt;= 23) |&gt;\n  arrange(desc(xG_plus_xA)) |&gt; \n  slice_max(xG_plus_xA, prop = 0.01)\n\n           Squad                Player Age xG_Expected xAG_Expected xG_plus_xA\n1       Dortmund        Erling Haaland  20        23.5          3.5       27.0\n2      Paris S-G         Kylian Mbappé  21        22.1          4.8       26.9\n3           Nice          Amine Gouiri  20        14.4          7.1       21.5\n4          Inter      Lautaro Martínez  22        15.2          5.7       20.9\n5     Fiorentina        Dušan Vlahović  20        18.5          2.2       20.7\n6  Real Sociedad       Mikel Oyarzabal  23        11.3          7.7       19.0\n7  Real Sociedad        Alexander Isak  20        16.8          1.8       18.6\n8        Everton Dominic Calvert-Lewin  23        16.3          2.0       18.3\n9        Sevilla     Youssef En-Nesyri  23        15.6          2.6       18.2\n10      Brighton           Neal Maupay  23        13.2          3.9       17.1\n11         Milan         Franck Kessié  23        14.0          2.9       16.9\n\n\nThis answers the question: Which young players are making the biggest impact in creating and finishing scoring opportunities? It helps identify top-performing young talent based on expected goals and assists.\nIn this pipeline, I selected the columns Squad, Player, Age, xG_Expected, and xAG_Expected to focus on player performance and age. I created a new column, xG_plus_xA, by adding expected goals (xG_Expected) and expected assists (xAG_Expected), which gives an overall measure of a player’s attacking contribution. I then filtered to keep only players aged 23 or younger, and sorted the results by the highest total attacking contribution.\n\n\nUse a group_by and aggregation (i.e. summarise) to calculate a summary statistic of your choice for your dataset. What does this mean in relation to your data?\n\n\nFB_player |&gt; \n  group_by(Squad) |&gt; \n  summarise(avg_expected_goal = mean(xG_Expected)) |&gt; \n  arrange(desc(avg_expected_goal))\n\n# A tibble: 98 × 2\n   Squad           avg_expected_goal\n   &lt;chr&gt;                       &lt;dbl&gt;\n 1 Barcelona                    3.04\n 2 Inter                        3.04\n 3 Manchester City              2.91\n 4 Lyon                         2.86\n 5 Napoli                       2.76\n 6 Bayern Munich                2.68\n 7 RB Leipzig                   2.62\n 8 Dortmund                     2.60\n 9 Juventus                     2.58\n10 Atalanta                     2.53\n# ℹ 88 more rows\n\n\nBy grouping the data by team and calculating the average expected goals (xG_Expected), we can compare how effective each squad is at creating scoring opportunities. Teams like Barcelona and Inter have the highest averages, suggesting their players generate more chances per match on average compared to other teams.\n\n\nWrite code to read and write your data set using two types of delimiters.\n\n\nreadr::write_csv(FB, \"FB_big5_standard_teams.csv\")\nFB_comma &lt;- readr::read_csv(\"FB_big5_standard_teams.csv\")\n\n\nreadr::write_delim(FB, \"FB_big5_standard_teams_pipe.txt\", delim = \"|\")\nFB_pipe &lt;- readr::read_delim(\"FB_big5_standard_teams_pipe.txt\", delim = \"|\")\n\nI obtained the dataset by using the fb_big5_advanced_season_stats function from the worldfootballR package. To practice reading and writing with different delimiters, I first saved the data as a CSV file and then read it back in. Next, I saved the same data using a pipe (“|”) delimiter and read it back as well."
  },
  {
    "objectID": "assignment2.html",
    "href": "assignment2.html",
    "title": "STAT 468 Assignment Analysis",
    "section": "",
    "text": "library(tidyverse)\nlibrary(dplyr)\nlibrary(nycflights13)\nlibrary(ggplot2)\nlibrary(scales)\nlibrary(ggrepel)\nlibrary(patchwork)\nlibrary(worldfootballR)\n\npart 2:\n1.Visualize\n\nFB &lt;- \n  fb_big5_advanced_season_stats(season_end_year=2021,\n                                stat_type=\"standard\",\n                                team_or_player=\"team\") |&gt; \n  filter(Team_or_Opponent == \"team\" )\n\n\nhighlight_team &lt;- FB |&gt; \n  filter(xG_Expected == max(xG_Expected, na.rm = TRUE))\n\nggplot(FB, aes(x = Poss, y = xG_Expected)) +\n  geom_point(aes(color = Comp), alpha = 0.6, size = 3) +\n  geom_point(data = highlight_team, \n             aes(x = Poss, y = xG_Expected), color = \"red\", size = 4) +\n\n  annotate(\n    geom = \"label\",\n    x = highlight_team$Poss - 4,\n    y = highlight_team$xG_Expected + 3,\n    label = \"Highest expected goals among all teams\",\n    color = \"red\",\n    fill = \"white\",\n    fontface = \"bold\") +\n\n\n  labs(\n    title = \"Linear Relationship Between Possession and Expected Goals\",\n    subtitle = \"Top 5 European Leagues, 2020–21 Season\",\n    caption = \"Source: worldfootballR\",\n    x = \"Possession (%)\",\n    y = \"Expected Goals (xG)\",\n    color = \"League\") +\n  theme_minimal() +\n  theme(axis.title = element_text(color = \"blue\", face = \"bold\"))\n\n\n\n\n\n\n\n\n\n\nModel\n\n\nmodel &lt;- lm(xG_Expected ~ Poss, data = FB)\nsummary(model)\n\n\nCall:\nlm(formula = xG_Expected ~ Poss, data = FB)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-17.1583  -5.3966  -0.2111   3.8036  24.6521 \n\nCoefficients:\n            Estimate Std. Error t value Pr(&gt;|t|)    \n(Intercept) -20.0017     6.5417  -3.058  0.00289 ** \nPoss          1.3980     0.1298  10.770  &lt; 2e-16 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 8.087 on 96 degrees of freedom\nMultiple R-squared:  0.5472,    Adjusted R-squared:  0.5424 \nF-statistic:   116 on 1 and 96 DF,  p-value: &lt; 2.2e-16\n\nggplot(FB, aes(x = Poss, y = xG_Expected)) +\n  geom_point(aes(color = Comp), alpha = 0.6, size = 3) +\n  geom_smooth(method = \"lm\", se = TRUE, color = \"darkblue\", linewidth = 1) +\n  labs(\n    title = \"Linear Relationship Between Possession and Expected Goals\",\n    subtitle = \"Linear regression with 95% confidence band\",\n    caption = \"Source: worldfootballR\",\n    x = \"Possession (%)\",\n    y = \"Expected Goals (xG)\",\n    color = \"League\") +\n  theme_minimal() +\n  theme(axis.title = element_text(color = \"blue\", face = \"bold\"))\n\n\n\n\n\n\n\n\nBased on the linear regression output, there is a strong positive relationship between possession percentage and expected goals (xG). The model estimates that for every 1 percent increase in possession, a team’s xG increases by approximately 1.40, and this result is statistically significant with a p-value less than 2e-16. The R-squared value is 0.547, meaning about 54.7 percent of the variation in expected goals across teams can be explained by possession. While possession is an important predictor of xG, the remaining variation suggests that other factors such as shot quality, tactics, or finishing also play a role."
  }
]